{"version":3,"sources":["services/ApiClient.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","event","name","target","this","value","preventDefault","sendGuess","correct","resultAttempt","m","onSubmit","type","maxLength","onChange","min","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAAMA,E,yGAMF,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,gCAI9CC,EACAC,EACAC,EACAC,GAEA,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAAa,CACzDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KAxBTP,EACGE,WAAa,wBADhBF,EAEGG,cAAgB,qBAFnBH,EAGGQ,YAAc,YA0BRR,QCiFAiB,EA3Gf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXd,EAAG,GACHC,EAAG,GACHF,KAAM,GACNgB,QAAS,GACTb,MAAO,GAET,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVH,EADrB,gEAauB,IAAD,OAClBtB,EAAUwB,YAAYC,MAAK,SAACC,GACtBA,EAAIC,GACND,EAAIE,OAAOH,MAAK,SAACG,GACf,EAAKC,SAAS,CACZxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,aAIZ,EAAKc,cAAc,+BAvB3B,mCA4BeC,GACX,IAAMC,EAAOD,EAAME,OAAOD,KAC1BE,KAAKL,SAAL,eACGG,EAAOD,EAAME,OAAOE,UA/B3B,yCAmCqBJ,GAAQ,IAAD,OACxBA,EAAMK,iBACNpC,EAAUqC,UACRH,KAAKf,MAAMf,KACX8B,KAAKf,MAAMd,EACX6B,KAAKf,MAAMb,EACX4B,KAAKf,MAAMZ,OACXkB,MAAK,SAACC,GACFA,EAAIC,GACND,EAAIE,OAAOH,MAAK,SAACG,GACXA,EAAKU,QACP,EAAKR,cAAc,0CAEnB,EAAKA,cACH,oBACEF,EAAKW,cACL,mCAKR,EAAKT,cAAc,6CAxD3B,oCA6DgBU,GACZN,KAAKL,SAAS,CACZT,QAASoB,MA/Df,+BAoEI,OACE,gCACE,gCACE,uDACA,+BACGN,KAAKf,MAAMd,EADd,MACoB6B,KAAKf,MAAMb,QAGjC,uBAAMmC,SAAUP,KAAKb,mBAArB,UACE,gDAEE,uBACEqB,KAAK,OACLC,UAAU,KACVX,KAAK,OACLG,MAAOD,KAAKf,MAAMf,KAClBwC,SAAUV,KAAKX,kBAGnB,uBACA,gDAEE,uBACEmB,KAAK,SACLG,IAAI,IACJb,KAAK,QACLG,MAAOD,KAAKf,MAAMZ,MAClBqC,SAAUV,KAAKX,kBAGnB,uBACA,uBAAOmB,KAAK,SAASP,MAAM,cAE7B,6BAAKD,KAAKf,MAAMC,iBArGxB,GAAwC0B,aCUzBC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5bacf963.chunk.js","sourcesContent":["class ApiClient {\r\n  static SERVER_URL = \"http://localhost:8080\";\r\n  static GET_CHALLENGE = \"/challenges/random\";\r\n  static POST_RESULT = \"/attempts\";\r\n\r\n  static challenge(): Promise<Response> {\r\n    return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\r\n  }\r\n\r\n  static sendGuess(\r\n    user: string,\r\n    a: number,\r\n    b: number,\r\n    guess: number\r\n  ): Promise<Response> {\r\n    return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        userAlias: user,\r\n        factorA: a,\r\n        factorB: b,\r\n        guess: guess,\r\n      }),\r\n    });\r\n  }\r\n}\r\nexport default ApiClient;\r\n","import React, { Component } from \"react\";\r\nimport ApiClient from \"../services/ApiClient\";\r\n\r\nexport class ChallengeComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      a: \"\",\r\n      b: \"\",\r\n      user: \"\",\r\n      message: \"\",\r\n      guess: 0,\r\n    };\r\n    this.handleSubmitResult = this.handleSubmitResult.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    ApiClient.challenge().then((res) => {\r\n      if (res.ok) {\r\n        res.json().then((json) => {\r\n          this.setState({\r\n            a: json.factorA,\r\n            b: json.factorB,\r\n          });\r\n        });\r\n      } else {\r\n        this.updateMessage(\"Can't reach the server\");\r\n      }\r\n    });\r\n  }\r\n\r\n  handleChange(event) {\r\n    const name = event.target.name;\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSubmitResult(event) {\r\n    event.preventDefault();\r\n    ApiClient.sendGuess(\r\n      this.state.user,\r\n      this.state.a,\r\n      this.state.b,\r\n      this.state.guess\r\n    ).then((res) => {\r\n      if (res.ok) {\r\n        res.json().then((json) => {\r\n          if (json.correct) {\r\n            this.updateMessage(\"Congratulations! Your guess is correct\");\r\n          } else {\r\n            this.updateMessage(\r\n              \"Oops! Your guess \" +\r\n                json.resultAttempt +\r\n                \" is wrong, but keep playing!\"\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        this.updateMessage(\"Error: server error or not available\");\r\n      }\r\n    });\r\n  }\r\n\r\n  updateMessage(m: string) {\r\n    this.setState({\r\n      message: m,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h3>Your new challenge is</h3>\r\n          <h1>\r\n            {this.state.a} x {this.state.b}\r\n          </h1>\r\n        </div>\r\n        <form onSubmit={this.handleSubmitResult}>\r\n          <label>\r\n            Your alias:\r\n            <input\r\n              type=\"text\"\r\n              maxLength=\"12\"\r\n              name=\"user\"\r\n              value={this.state.user}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Your guess:\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              name=\"guess\"\r\n              value={this.state.guess}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <br />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        <h4>{this.state.message}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChallengeComponent;\r\n","import \"./App.css\";\nimport ChallengeComponent from \"./components/ChallengeComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChallengeComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}